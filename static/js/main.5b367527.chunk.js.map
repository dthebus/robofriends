{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","width","height","src","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b367527.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\treturn(\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robot' width=\"200\" height=\"200\" src={`https://robohash.org/${id}?size=200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n\t// if(true){\n\t// \tthrow new Error('Nooooo');\n\t// }\n\treturn (\n\t\t <div>\n\t\t {\n\t\t\trobots.map((user, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t/>\n\t\t\t\t);\t \n\t\t\t})  \n\t\t} \n\t\t </div>\n\t\t);\n}\nexport default CardList;","import React from 'react'\n\nconst SearchBox = ({searchField, searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t<input \n\t\t\taria-label='Search Robots'\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots'\n\t\t\tonChange={searchChange}\n\t\t/>\n\t\t</div>\n\t\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t\t<div style={{overflow:'scroll', height: '400px'}}>\n\t\t\t{props.children}\n\t\t\t</div>\n\t\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError:false\n\t\t}\n\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender() {\n\t\tif(this.state.hasError){\n\t\t\treturn <h1> Ooops, not good </h1>\n\t\t\t}\n\t\t\treturn this.props.children;\n\t\t}\n\t\n\n}\n\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React,{ useEffect} from 'react'\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css'\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nfunction App (props) {\n\tconst { searchField, onSearchChange, robots, isPending } = props;\n\nuseEffect(() => {\n\tprops.onRequestRobots()\n},[]);\n\nconst filteredRobots = robots.filter(robot => {\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\n\t})\n\n\n\treturn (\n\t\tisPending ?\n\t\t <h1>Loading</h1> :\n\t\t<div className='tc'>\n\t\t\t<h1 className='f1' >RoboFriends</h1>\n\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundry>\n\t\t\t \t\t<CardList robots={filteredRobots}/>\n\t\t\t \t</ErrorBoundry>\n\t\t \t</Scroll>\n\t\t</div>\n\t);\n\t\t\n\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED} from './constants.js'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t.then(response=>response.json())\n\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED} from './constants.js'\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots ={\n\tisPending: false,\n\trobots:[],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type){\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true})\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending:false})\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending:false})\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = \n    createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}